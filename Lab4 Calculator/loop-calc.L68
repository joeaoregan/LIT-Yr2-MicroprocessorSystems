00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.00
Created On: 28/03/2017 22:37:45

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Program    :  loop-calc.x68
00000000                             3  * Written by :  Joe O'Regan
00000000                             4  * Date       :  24/02/2016
00000000                             5  * Description:  Lab 4 Part 1: Prompt user to read in from keyboard
00000000                             6  *               store the numbers starting at membory location 2000
00000000                             7  *               After the user has selected a menu option. 
00000000                             8  *               Add the numbers together and store in D5 OR
00000000                             9  *               Multiply the all the numbers and store in D6
00000000                            10  *               output the numbers to screen and the total for
00000000                            11  *               add or multiply depending on the option selected
00000000                            12  *-----------------------------------------------------------
00001000                            13          ORG     $1000           ; Program starts at address $1000
00001000                            14  START:                          ; First instruction of program
00001000                            15  * MENU
00001000                            16  
00001000                            17  * Display Options - Branches back to MENU after calculation performed   
00001000  307C 2000                 18  MENU    MOVE.W  #$2000,A0       ; Memory location A0 starts at $2000
00001004  43F9 000011DD             19          LEA Option,A1           ; Display the Option Message (Menu)
0000100A  103C 000E                 20          MOVE.B  #14,D0          ; Trap task 14: Display message
0000100E  4E4F                      21          TRAP    #15
00001010                            22  * Input Menu Option
00001010  103C 0004                 23          MOVE.B  #4,D0           ; Trap task 4: Read in input from keyboard
00001014  4E4F                      24          TRAP    #15
00001016                            25          
00001016  1601                      26          MOVE.B  D1,D3           ; Store option selected in D3 to decide output later
00001018                            27          
00001018                            28  * MENU OPTION COMPARES & BRANCHES       
00001018                            29  * Exit if 0     
00001018  B2BC 00000000             30          CMP.L   #0,D1           ; Compares D1 to the number 0
0000101E  6700 00F2                 31          BEQ     EXIT            ; Branch to EXIT if they are equal
00001022                            32  * INVALID: Check number is in valid range 0-2        
00001022  B23C 0000                 33          CMP.B   #0,D1           ; Compares D1 to 0
00001026  6D00 00DA                 34          BLT     INVALID         ; BLT branches if D1 is less than 0
0000102A  B23C 0002                 35          CMP.B   #2,D1           ; Compares D1 to 2
0000102E  6E00 00D2                 36          BGT     INVALID         ; BGT branches if D1 is greater than 2
00001032                            37  * User Message: Enter 0 to calculate       
00001032  43F9 00001274             38          LEA Calculate,A1        ; Display Calculate Message
00001038  103C 000E                 39          MOVE.B  #14,D0
0000103C  4E4F                      40          TRAP    #15
0000103E                            41  * Decide to proceed with ADDITION or MULTIPLICATION
0000103E  B23C 0001                 42          CMP.B   #1,D1           ; Compares D1 and 1
00001042  6600 0024                 43          BNE     MULT            ; Branches to MULT (Multiplication) if D1 not equals 1
00001046                            44  
00001046                            45  * ADDITION:
00001046  4205                      46          CLR.B   D5              ; Clear / Reset D5, Data Register Containing The Addition Total
00001048                            47    REPEAT                        ; REPEAT UNTIL Loop - Ends when 0 IS ENTERED   
00001048  43F9 00001118             48          LEA PromptA,A1          ; PromptA Message: Enter number to Add
0000104E  103C 000E                 49          MOVE.B  #14,D0          
00001052  4E4F                      50          TRAP    #15
00001054                            51  * get number from user into address register and increment by a word i.e. 16 bits
00001054  103C 0004                 52          MOVE.B  #4,D0
00001058  4E4F                      53          TRAP    #15
0000105A  30C1                      54          MOVE.W  D1,(A0)+        ; Move D1 (num entered) to Memory location A0 and increment A0
0000105C                            55  * Add number to total   
0000105C  DA41                      56          ADD     D1,D5           ; Add D1 to D5 (Store in D5)
0000105E                            57    UNTIL.W D1 <EQ> #0 DO         ; End of loop
00001064                            58  * Branch To Output  
00001064  6000 002A                 59          BRA     OUTPUT          ; Branch to Output
00001068                            60          
00001068                            61  * MULTIPLICATION:   
00001068  3C3C 0001                 62  MULT    MOVE.W  #1,D6           ; Set / Reset value of D6 to 1 for multiplication  
0000106C                            63    REPEAT                        ; REPEAT UNTIL Loop - Ends when 0 IS ENTERED   
0000106C  43F9 0000112E             64          LEA PromptM,A1          ; PromptM Message: Enter number to Multiply
00001072  103C 000E                 65          MOVE.B  #14,D0
00001076  4E4F                      66          TRAP    #15
00001078                            67  * get number from user into address register and increment by a word
00001078  103C 0004                 68          MOVE.B  #4,D0           ; Trap task 4: Read in input from keyboard
0000107C  4E4F                      69          TRAP    #15
0000107E  30C1                      70          MOVE.W  D1,(A0)+        ; Move D1 (num entered) to Memory location A0 and increment A0
00001080                            71  * Multiply number by the total in D6
00001080                            72          iF.W D1 <NE> #0 THEN    ; If the number is not equal to 0 multiply by total
00001088  CCC1                      73          MULU    D1,D6           ; Multiply number entered by contents of D6
0000108A                            74          ENDI
0000108A                            75    UNTIL.W D1 <EQ> #0 DO         ; No need to branch to output
00001090                            76  
00001090                            77  * OUTPUT:
00001090                            78  OUTPUT
00001090                            79  * Reset A0 to $2000 and print numbers to screen, until 0 is reached in memory
00001090  307C 2000                 80    MOVE.W #$2000,A0              ; Reset A0 to $2000 so values stored can be printed to screen
00001094  343C 000A                 81    MOVE.W #10,D2                 ; PLACE 10 IN D2 - ***FORMAT IS DECIMAL***
00001098                            82    REPEAT 
00001098  3218                      83          MOVE.W (A0)+,D1         ; Move contents of A0 to D1 and increment A0
0000109A                            84          iF.W D1 <NE> #0 THEN
000010A2  43F9 0000118C             85                  LEA NUM,A1      ; Print the string NUM using TASK 14
000010A8  103C 000E                 86                  MOVE.B  #14,D0  ; Output NUM message
000010AC  4E4F                      87                  TRAP    #15     
000010AE                            88  
000010AE  103C 000F                 89                  MOVE.B  #15,D0  ; Print D1 to screen using TASK 15, with format specified in D2
000010B2  4E4F                      90                  TRAP    #15 
000010B4                            91          ENDI            
000010B4                            92    UNTIL.W D1 <EQ> #0 DO         ; End of Repeat Until Loop for printing numbers entered
000010BA                            93  * Output the numbers added together
000010BA                            94          iF.W D3 <EQ> #1 THEN
000010C2  3205                      95          MOVE.W  D5,D1           ; Move the total D5 to D1 to display
000010C4  43F9 00001149             96                  LEA TotAdd,A1   ; Output the Message for Total of all numbers added
000010CA  103C 000E                 97                  MOVE.B  #14,D0  ; Output Total Added message
000010CE  4E4F                      98                  TRAP    #15     
000010D0                            99                  
000010D0  103C 0003                100          MOVE.B  #3,D0           ; Output the Value for total of all numbers added
000010D4  4E4F                     101          TRAP    #15     
000010D6                           102          ENDI
000010D6                           103  * Output the numbers multiplied together
000010D6                           104          iF.W D3 <EQ> #2 THEN
000010DE  3206                     105          MOVE.W  D6,D1           ; Move the total D6 to D1 to display
000010E0  43F9 00001166            106                  LEA TotMul,A1   ; Output the Message for Total of all numbers multiplied
000010E6  103C 000E                107                  MOVE.B  #14,D0  ; Output Total Multiplied message
000010EA  4E4F                     108                  TRAP    #15     
000010EC                           109                  
000010EC  103C 0003                110          MOVE.B  #3,D0           ; Output the Value for total of all numbers Multiplied
000010F0  4E4F                     111          TRAP    #15
000010F2                           112          ENDI
000010F2                           113  * Run the program again?        
000010F2  43F9 00001243            114                  LEA RunAgain,A1 ; Ask user if they would like to run program again
000010F8  103C 000E                115                  MOVE.B  #14,D0
000010FC  4E4F                     116                  TRAP    #15
000010FE                           117  * Branch back to LOOP to run menu/options again   
000010FE  6000 FF00                118          BRA     MENU            ; Branch back to loop
00001102                           119        
00001102                           120  * Invalid Option Selected
00001102  43F9 000011A7            121  INVALID LEA     INV,A1
00001108  103C 000E                122          MOVE.B  #14,D0  
0000110C  4E4F                     123          TRAP    #15
0000110E  6000 FEF0                124          BRA     MENU
00001112                           125  * Exit
00001112  103C 0009                126  EXIT    MOVE.B  #9,D0
00001116  4E4F                     127          TRAP    #15             ; Halt simulator
00001118                           128  
00001118                           129  * Variables and Strings
00001118  =0000000D                130  CR              EQU     $D                                                  ; Carriage Return
00001118  =0000000A                131  LF              EQU     $A                                                  ; Line Feed
00001118= 45 6E 74 65 72 20 ...    132  PromptA         DC.B    'Enter number to add: ',0                           ; Enter new number message add to total
0000112E= 45 6E 74 65 72 20 ...    133  PromptM         DC.B    'Enter number to multiply: ',0                      ; Enter new number message multiply by total
00001149= 0D 0A 0D 0A 54 6F ...    134  TotAdd          DC.B    CR,LF,CR,LF,'Total Of Numbers Added: ',0            ; Output the total for the all numbers added
00001166= 0D 0A 0D 0A 56 61 ...    135  TotMul          DC.B    CR,LF,CR,LF,'Value Of All Numbers Multiplied: ',0   ; Total for all the numbers multiplied
0000118C= 0D 0A 54 68 65 20 ...    136  NUM             DC.B    CR,LF,'The number entered was: ',0                  ; Output number entered message
000011A7= 0D 0A 4E 6F 74 20 ...    137  INV             DC.B    CR,LF,'Not A Valid Option'                          ; Invalid selection message
000011BB= 0D 0A 4F 70 74 69 ...    138                  DC.B    CR,LF,'Options Are Between 0 and 2',CR,LF,CR,LF,0
000011DD= 50 6C 65 61 73 65 ...    139  Option          DC.B    'Please Choose An Option: '                         ; Menu / Options message output
000011F6= 0D 0A 31 2E 20 41 ...    140                  DC.B    CR,LF,'1. Add All The Numbers'
0000120E= 0D 0A 32 2E 20 4D ...    141                  DC.B    CR,LF,'2. Multiply All The Numbers'
0000122B= 0D 0A 30 2E 20 45 ...    142                  DC.B    CR,LF,'0. Exit The Program',CR,LF,0
00001243= 0D 0A 0D 0A 57 6F ...    143  RunAgain        DC.B    CR,LF,CR,LF,'Would you like to run the program again?',CR,LF,CR,LF,0
00001274= 0D 0A 45 6E 74 65 ...    144  Calculate       DC.B    CR,LF,'Enter 0 to perform calculation',CR,LF,0      ; Explain to user 0 performs calculation
00001297                           145  
00001297                           146          END     START                                                       ; Last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CALCULATE           1274
CR                  D
EXIT                1112
INV                 11A7
INVALID             1102
LF                  A
MENU                1000
MULT                1068
NUM                 118C
OPTION              11DD
OUTPUT              1090
PROMPTA             1118
PROMPTM             112E
RUNAGAIN            1243
START               1000
TOTADD              1149
TOTMUL              1166
_00000000           108A
_00000001           10B4
_00000002           10D6
_00000003           10F2
_30000000           1048
_30000001           106C
_30000002           1098
